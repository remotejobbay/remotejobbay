'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { FaRegStar, FaStar } from 'react-icons/fa';
import { FaXTwitter, FaFacebookF, FaLinkedinIn } from 'react-icons/fa6';

export default function Home() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [bookmarked, setBookmarked] = useState<string[]>([]);
  const [jobs, setJobs] = useState<Job[]>([]);

  useEffect(() => {
    const saved = localStorage.getItem('bookmarkedJobs');
    if (saved) {
      setBookmarked(JSON.parse(saved));
    }
  }, []);

  useEffect(() => {
    fetch('http://127.0.0.1:8000/jobs')
      .then((res) => res.json())
      .then((data) => setJobs(data))
      .catch((err) => console.error('Failed to fetch jobs:', err));
  }, []);

  const toggleBookmark = (jobId: string | number) => {
    const idStr = String(jobId);
    let updated = [...bookmarked];

    if (bookmarked.includes(idStr)) {
      updated = updated.filter((id) => id !== idStr);
    } else {
      updated.push(idStr);
    }

    setBookmarked(updated);
    localStorage.setItem('bookmarkedJobs', JSON.stringify(updated));
  };

  const getPostedLabel = (datePosted: string) => {
    const jobDate = new Date(datePosted);
    const today = new Date();
    const diffTime = today.getTime() - jobDate.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 0) return 'üìÖ Today';
    if (diffDays === 1) return 'üìÖ 1 day ago';
    return `üìÖ ${diffDays} days ago`;
  };

  const filteredJobs: Job[] = jobs
    .filter((job) => {
      const matchesSearch = (job.title + job.company + job.location)
        .toLowerCase()
        .includes(searchTerm.toLowerCase());

      const matchesCategory = selectedCategory
        ? job.category === selectedCategory
        : true;

      return matchesSearch && matchesCategory;
    })
    .sort(
      (a, b) =>
        new Date(b.datePosted).getTime() - new Date(a.datePosted).getTime()
    );

  return (
    <>
      {/* Header */}
      <header className="bg-[#0f172a] text-white shadow-md sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-6 py-4 flex flex-col sm:flex-row sm:items-center justify-between">
          <div className="flex items-center space-x-2 mb-4 sm:mb-0">
            <span className="text-2xl">üåç</span>
            <h1 className="text-2xl font-bold tracking-tight text-blue-400">EchoJobs</h1>
          </div>
          <div className="flex items-center gap-4 flex-wrap">
            <Link
              href="/login"
              className="text-sm hover:text-blue-400 transition duration-200 font-medium"
            >
              Login / Create Account
            </Link>
            <select
              className="bg-[#1e293b] text-white border border-gray-700 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="">Job Categories</option>
              <option value="Frontend">Frontend</option>
              <option value="Backend">Backend</option>
              <option value="Design">Design</option>
              <option value="DevOps">DevOps</option>
              <option value="Product">Product</option>
            </select>
            <button className="bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold px-5 py-2 rounded-md shadow transition duration-200">
              Post a Job ‚Äì $50 ‚Üí
            </button>
          </div>
        </div>
      </header>

      <motion.main
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, ease: 'easeOut' }}
        className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen"
      >
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-10"
        >
          <h1 className="text-4xl font-bold mb-4 text-gray-800">
            Find Global Remote Jobs You Can Do from Anywhere üåç
          </h1>
          <p className="text-gray-600 text-lg">
            Every job on this site is remote and open to applicants from any country. Work from wherever you are.
          </p>
        </motion.div>

        <input
          type="text"
          placeholder="Search by title, company, or location..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="mb-8 px-5 py-3 border border-gray-300 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-blue-500 shadow-sm bg-white"
        />

        {/* Job Listings */}
        <div className="space-y-4">
          {filteredJobs.length > 0 ? (
            filteredJobs.map((job) => (
              <div
                key={job.id}
                className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 p-6 border border-gray-200 rounded-xl bg-white hover:shadow-md transform hover:-translate-y-1 transition duration-300"
              >
                <div className="flex-shrink-0 mr-4">
                 <img
  src={job.logo?.trim() ? job.logo : '/default-logo.png'}
  alt={`${job.company} logo`}
  className="w-16 h-16 object-contain rounded-md border"
/>

                </div>
                <div className="flex-1">
                  <Link href={`/jobs/${job.id}`} className="block">
                    <h3 className="text-lg font-bold text-blue-600 hover:underline">{job.title}</h3>
                    <p className="text-gray-700 font-medium">{job.company}</p>
                  </Link>
                  <div className="flex flex-wrap gap-2 mt-2">
                    <span className="bg-green-100 text-green-700 text-xs px-2 py-1 rounded-full">üåç Remote</span>
                    <span className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full">{job.type}</span>
                    <span className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full">üí∞ {job.salary}</span>
                  </div>
                  <p className="text-sm text-gray-500 mt-2">{job.location}</p>
                </div>
                <div className="flex flex-col items-end text-right space-y-2">
                  <button
                    onClick={() => toggleBookmark(job.id)}
                    title={bookmarked.includes(String(job.id)) ? 'Remove Bookmark' : 'Bookmark this job'}
                    className="text-yellow-500 hover:text-yellow-600 transition"
                  >
                    {bookmarked.includes(String(job.id)) ? <FaStar className="w-5 h-5" /> : <FaRegStar className="w-5 h-5" />}
                  </button>
                  <span className="bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded-full">
                    {getPostedLabel(job.datePosted)}
                  </span>
                </div>
              </div>
            ))
          ) : (
            <p className="text-gray-500 col-span-full text-center">No jobs found.</p>
          )}
        </div>
      </motion.main>
    </>
  );
}

interface Job {
  id: number;
  title: string;
  company: string;
  location: string;
  type: string;
  description: string;
  logo: string;
  datePosted: string;
  category: string;
  salary: string;
}
